/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/rulingsMappers";
import * as Parameters from "../models/parameters";
import { ScryfallClientContext } from "../scryfallClientContext";

/** Class representing a Rulings. */
export class Rulings {
  private readonly client: ScryfallClientContext;

  /**
   * Create a Rulings.
   * @param {ScryfallClientContext} client Reference to the service client.
   */
  constructor(client: ScryfallClientContext) {
    this.client = client;
  }

  /**
   * @param {number} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getByMultiverseIdWithHttpOperationResponse(id: number, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.RulingList>> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getByMultiverseIdOperationSpec);
  }

  /**
   * @param {number} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getByMtgoIdWithHttpOperationResponse(id: number, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.RulingList>> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getByMtgoIdOperationSpec);
  }

  /**
   * @param {string} code
   *
   * @param {number} number
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getByCodeByNumberIdWithHttpOperationResponse(code: string, number: number, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.RulingList>> {
    return this.client.sendOperationRequest(
      {
        code,
        number,
        options
      },
      getByCodeByNumberIdOperationSpec);
  }

  /**
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getByIdWithHttpOperationResponse(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.RulingList>> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getByIdOperationSpec);
  }

  /**
   * @param {number} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.RulingList} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.RulingList} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getByMultiverseId(id: number): Promise<Models.RulingList>;
  getByMultiverseId(id: number, options: msRest.RequestOptionsBase): Promise<Models.RulingList>;
  getByMultiverseId(id: number, callback: msRest.ServiceCallback<Models.RulingList>): void;
  getByMultiverseId(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RulingList>): void;
  getByMultiverseId(id: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.RulingList>): any {
    return msRest.responseToBody(this.getByMultiverseIdWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @param {number} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.RulingList} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.RulingList} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getByMtgoId(id: number): Promise<Models.RulingList>;
  getByMtgoId(id: number, options: msRest.RequestOptionsBase): Promise<Models.RulingList>;
  getByMtgoId(id: number, callback: msRest.ServiceCallback<Models.RulingList>): void;
  getByMtgoId(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RulingList>): void;
  getByMtgoId(id: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.RulingList>): any {
    return msRest.responseToBody(this.getByMtgoIdWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @param {string} code
   *
   * @param {number} number
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.RulingList} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.RulingList} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getByCodeByNumberId(code: string, number: number): Promise<Models.RulingList>;
  getByCodeByNumberId(code: string, number: number, options: msRest.RequestOptionsBase): Promise<Models.RulingList>;
  getByCodeByNumberId(code: string, number: number, callback: msRest.ServiceCallback<Models.RulingList>): void;
  getByCodeByNumberId(code: string, number: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RulingList>): void;
  getByCodeByNumberId(code: string, number: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.RulingList>): any {
    return msRest.responseToBody(this.getByCodeByNumberIdWithHttpOperationResponse.bind(this), code, number, options, callback);
  }

  /**
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.RulingList} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.RulingList} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getById(id: string): Promise<Models.RulingList>;
  getById(id: string, options: msRest.RequestOptionsBase): Promise<Models.RulingList>;
  getById(id: string, callback: msRest.ServiceCallback<Models.RulingList>): void;
  getById(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RulingList>): void;
  getById(id: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.RulingList>): any {
    return msRest.responseToBody(this.getByIdWithHttpOperationResponse.bind(this), id, options, callback);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getByMultiverseIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/multiverse/{id}/rulings",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RulingList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByMtgoIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/mtgo/{id}/rulings",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RulingList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByCodeByNumberIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/{code}/{number}/rulings",
  urlParameters: [
    Parameters.code,
    Parameters.number
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RulingList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/{id}/rulings",
  urlParameters: [
    Parameters.id1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RulingList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
