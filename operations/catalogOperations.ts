/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/catalogOperationsMappers";
import { ScryfallClientContext } from "../scryfallClientContext";

/** Class representing a CatalogOperations. */
export class CatalogOperations {
  private readonly client: ScryfallClientContext;

  /**
   * Create a CatalogOperations.
   * @param {ScryfallClientContext} client Reference to the service client.
   */
  constructor(client: ScryfallClientContext) {
    this.client = client;
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getCardNamesWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Catalog>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getCardNamesOperationSpec);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getWordBankWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Catalog>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getWordBankOperationSpec);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getCreatureTypesWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Catalog>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getCreatureTypesOperationSpec);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getPlaneswalkerTypesWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Catalog>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getPlaneswalkerTypesOperationSpec);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getLandTypesWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Catalog>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getLandTypesOperationSpec);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getArtifactTypesWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Catalog>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getArtifactTypesOperationSpec);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getEnchantmentTypesWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Catalog>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getEnchantmentTypesOperationSpec);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSpellTypesWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Catalog>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getSpellTypesOperationSpec);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getPowersWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Catalog>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getPowersOperationSpec);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getToughnessesWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Catalog>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getToughnessesOperationSpec);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getLoyaltiesWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Catalog>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getLoyaltiesOperationSpec);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getWatermarksWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Catalog>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getWatermarksOperationSpec);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Catalog} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Catalog} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getCardNames(): Promise<Models.Catalog>;
  getCardNames(options: msRest.RequestOptionsBase): Promise<Models.Catalog>;
  getCardNames(callback: msRest.ServiceCallback<Models.Catalog>): void;
  getCardNames(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Catalog>): void;
  getCardNames(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Catalog>): any {
    return msRest.responseToBody(this.getCardNamesWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Catalog} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Catalog} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getWordBank(): Promise<Models.Catalog>;
  getWordBank(options: msRest.RequestOptionsBase): Promise<Models.Catalog>;
  getWordBank(callback: msRest.ServiceCallback<Models.Catalog>): void;
  getWordBank(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Catalog>): void;
  getWordBank(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Catalog>): any {
    return msRest.responseToBody(this.getWordBankWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Catalog} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Catalog} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getCreatureTypes(): Promise<Models.Catalog>;
  getCreatureTypes(options: msRest.RequestOptionsBase): Promise<Models.Catalog>;
  getCreatureTypes(callback: msRest.ServiceCallback<Models.Catalog>): void;
  getCreatureTypes(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Catalog>): void;
  getCreatureTypes(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Catalog>): any {
    return msRest.responseToBody(this.getCreatureTypesWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Catalog} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Catalog} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getPlaneswalkerTypes(): Promise<Models.Catalog>;
  getPlaneswalkerTypes(options: msRest.RequestOptionsBase): Promise<Models.Catalog>;
  getPlaneswalkerTypes(callback: msRest.ServiceCallback<Models.Catalog>): void;
  getPlaneswalkerTypes(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Catalog>): void;
  getPlaneswalkerTypes(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Catalog>): any {
    return msRest.responseToBody(this.getPlaneswalkerTypesWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Catalog} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Catalog} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getLandTypes(): Promise<Models.Catalog>;
  getLandTypes(options: msRest.RequestOptionsBase): Promise<Models.Catalog>;
  getLandTypes(callback: msRest.ServiceCallback<Models.Catalog>): void;
  getLandTypes(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Catalog>): void;
  getLandTypes(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Catalog>): any {
    return msRest.responseToBody(this.getLandTypesWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Catalog} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Catalog} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getArtifactTypes(): Promise<Models.Catalog>;
  getArtifactTypes(options: msRest.RequestOptionsBase): Promise<Models.Catalog>;
  getArtifactTypes(callback: msRest.ServiceCallback<Models.Catalog>): void;
  getArtifactTypes(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Catalog>): void;
  getArtifactTypes(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Catalog>): any {
    return msRest.responseToBody(this.getArtifactTypesWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Catalog} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Catalog} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getEnchantmentTypes(): Promise<Models.Catalog>;
  getEnchantmentTypes(options: msRest.RequestOptionsBase): Promise<Models.Catalog>;
  getEnchantmentTypes(callback: msRest.ServiceCallback<Models.Catalog>): void;
  getEnchantmentTypes(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Catalog>): void;
  getEnchantmentTypes(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Catalog>): any {
    return msRest.responseToBody(this.getEnchantmentTypesWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Catalog} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Catalog} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getSpellTypes(): Promise<Models.Catalog>;
  getSpellTypes(options: msRest.RequestOptionsBase): Promise<Models.Catalog>;
  getSpellTypes(callback: msRest.ServiceCallback<Models.Catalog>): void;
  getSpellTypes(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Catalog>): void;
  getSpellTypes(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Catalog>): any {
    return msRest.responseToBody(this.getSpellTypesWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Catalog} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Catalog} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getPowers(): Promise<Models.Catalog>;
  getPowers(options: msRest.RequestOptionsBase): Promise<Models.Catalog>;
  getPowers(callback: msRest.ServiceCallback<Models.Catalog>): void;
  getPowers(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Catalog>): void;
  getPowers(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Catalog>): any {
    return msRest.responseToBody(this.getPowersWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Catalog} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Catalog} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getToughnesses(): Promise<Models.Catalog>;
  getToughnesses(options: msRest.RequestOptionsBase): Promise<Models.Catalog>;
  getToughnesses(callback: msRest.ServiceCallback<Models.Catalog>): void;
  getToughnesses(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Catalog>): void;
  getToughnesses(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Catalog>): any {
    return msRest.responseToBody(this.getToughnessesWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Catalog} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Catalog} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getLoyalties(): Promise<Models.Catalog>;
  getLoyalties(options: msRest.RequestOptionsBase): Promise<Models.Catalog>;
  getLoyalties(callback: msRest.ServiceCallback<Models.Catalog>): void;
  getLoyalties(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Catalog>): void;
  getLoyalties(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Catalog>): any {
    return msRest.responseToBody(this.getLoyaltiesWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Catalog} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Catalog} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getWatermarks(): Promise<Models.Catalog>;
  getWatermarks(options: msRest.RequestOptionsBase): Promise<Models.Catalog>;
  getWatermarks(callback: msRest.ServiceCallback<Models.Catalog>): void;
  getWatermarks(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Catalog>): void;
  getWatermarks(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Catalog>): any {
    return msRest.responseToBody(this.getWatermarksWithHttpOperationResponse.bind(this), options, callback);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getCardNamesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "catalog/card-names",
  responses: {
    200: {
      bodyMapper: Mappers.Catalog
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getWordBankOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "catalog/word-bank",
  responses: {
    200: {
      bodyMapper: Mappers.Catalog
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getCreatureTypesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "catalog/creature-types",
  responses: {
    200: {
      bodyMapper: Mappers.Catalog
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getPlaneswalkerTypesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "catalog/planeswalker-types",
  responses: {
    200: {
      bodyMapper: Mappers.Catalog
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getLandTypesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "catalog/land-types",
  responses: {
    200: {
      bodyMapper: Mappers.Catalog
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getArtifactTypesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "catalog/artifact-types",
  responses: {
    200: {
      bodyMapper: Mappers.Catalog
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getEnchantmentTypesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "catalog/enchantment-types",
  responses: {
    200: {
      bodyMapper: Mappers.Catalog
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getSpellTypesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "catalog/spell-types",
  responses: {
    200: {
      bodyMapper: Mappers.Catalog
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getPowersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "catalog/powers",
  responses: {
    200: {
      bodyMapper: Mappers.Catalog
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getToughnessesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "catalog/thoughnesses",
  responses: {
    200: {
      bodyMapper: Mappers.Catalog
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getLoyaltiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "catalog/loyalties",
  responses: {
    200: {
      bodyMapper: Mappers.Catalog
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getWatermarksOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "catalog/watermarks",
  responses: {
    200: {
      bodyMapper: Mappers.Catalog
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
