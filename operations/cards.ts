/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/cardsMappers";
import * as Parameters from "../models/parameters";
import { ScryfallClientContext } from "../scryfallClientContext";

/** Class representing a Cards. */
export class Cards {
  private readonly client: ScryfallClientContext;

  /**
   * Create a Cards.
   * @param {ScryfallClientContext} client Reference to the service client.
   */
  constructor(client: ScryfallClientContext) {
    this.client = client;
  }

  /**
   * @param {CardsGetAllOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getAllWithHttpOperationResponse(options?: Models.CardsGetAllOptionalParams): Promise<msRest.HttpOperationResponse<Models.CardList>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllOperationSpec);
  }

  /**
   * @param {string} q
   *
   * @param {CardsSearchOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  searchWithHttpOperationResponse(q: string, options?: Models.CardsSearchOptionalParams): Promise<msRest.HttpOperationResponse<Models.CardList>> {
    return this.client.sendOperationRequest(
      {
        q,
        options
      },
      searchOperationSpec);
  }

  /**
   * @param {CardsGetNamedOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getNamedWithHttpOperationResponse(options?: Models.CardsGetNamedOptionalParams): Promise<msRest.HttpOperationResponse<Models.Card>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getNamedOperationSpec);
  }

  /**
   * @param {string} q
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  autocompleteWithHttpOperationResponse(q: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Catalog>> {
    return this.client.sendOperationRequest(
      {
        q,
        options
      },
      autocompleteOperationSpec);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getRandomWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Card>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getRandomOperationSpec);
  }

  /**
   * @param {number} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getByMultiverseIdWithHttpOperationResponse(id: number, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Card>> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getByMultiverseIdOperationSpec);
  }

  /**
   * @param {number} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getByMtgoIdWithHttpOperationResponse(id: number, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Card>> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getByMtgoIdOperationSpec);
  }

  /**
   * @param {number} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getByArenaIdWithHttpOperationResponse(id: number, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Card>> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getByArenaIdOperationSpec);
  }

  /**
   * @param {string} code
   *
   * @param {number} number
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getByCodeByNumberWithHttpOperationResponse(code: string, number: number, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Card>> {
    return this.client.sendOperationRequest(
      {
        code,
        number,
        options
      },
      getByCodeByNumberOperationSpec);
  }

  /**
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getByIdWithHttpOperationResponse(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Card>> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getByIdOperationSpec);
  }

  /**
   * @param {CardsGetAllOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.CardList} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.CardList} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getAll(): Promise<Models.CardList>;
  getAll(options: Models.CardsGetAllOptionalParams): Promise<Models.CardList>;
  getAll(callback: msRest.ServiceCallback<Models.CardList>): void;
  getAll(options: Models.CardsGetAllOptionalParams, callback: msRest.ServiceCallback<Models.CardList>): void;
  getAll(options?: Models.CardsGetAllOptionalParams, callback?: msRest.ServiceCallback<Models.CardList>): any {
    return msRest.responseToBody(this.getAllWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @param {string} q
   *
   * @param {CardsSearchOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.CardList} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.CardList} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  search(q: string): Promise<Models.CardList>;
  search(q: string, options: Models.CardsSearchOptionalParams): Promise<Models.CardList>;
  search(q: string, callback: msRest.ServiceCallback<Models.CardList>): void;
  search(q: string, options: Models.CardsSearchOptionalParams, callback: msRest.ServiceCallback<Models.CardList>): void;
  search(q: string, options?: Models.CardsSearchOptionalParams, callback?: msRest.ServiceCallback<Models.CardList>): any {
    return msRest.responseToBody(this.searchWithHttpOperationResponse.bind(this), q, options, callback);
  }

  /**
   * @param {CardsGetNamedOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Card} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Card} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getNamed(): Promise<Models.Card>;
  getNamed(options: Models.CardsGetNamedOptionalParams): Promise<Models.Card>;
  getNamed(callback: msRest.ServiceCallback<Models.Card>): void;
  getNamed(options: Models.CardsGetNamedOptionalParams, callback: msRest.ServiceCallback<Models.Card>): void;
  getNamed(options?: Models.CardsGetNamedOptionalParams, callback?: msRest.ServiceCallback<Models.Card>): any {
    return msRest.responseToBody(this.getNamedWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @param {string} q
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Catalog} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Catalog} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  autocomplete(q: string): Promise<Models.Catalog>;
  autocomplete(q: string, options: msRest.RequestOptionsBase): Promise<Models.Catalog>;
  autocomplete(q: string, callback: msRest.ServiceCallback<Models.Catalog>): void;
  autocomplete(q: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Catalog>): void;
  autocomplete(q: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Catalog>): any {
    return msRest.responseToBody(this.autocompleteWithHttpOperationResponse.bind(this), q, options, callback);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Card} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Card} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getRandom(): Promise<Models.Card>;
  getRandom(options: msRest.RequestOptionsBase): Promise<Models.Card>;
  getRandom(callback: msRest.ServiceCallback<Models.Card>): void;
  getRandom(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Card>): void;
  getRandom(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Card>): any {
    return msRest.responseToBody(this.getRandomWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @param {number} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Card} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Card} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getByMultiverseId(id: number): Promise<Models.Card>;
  getByMultiverseId(id: number, options: msRest.RequestOptionsBase): Promise<Models.Card>;
  getByMultiverseId(id: number, callback: msRest.ServiceCallback<Models.Card>): void;
  getByMultiverseId(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Card>): void;
  getByMultiverseId(id: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Card>): any {
    return msRest.responseToBody(this.getByMultiverseIdWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @param {number} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Card} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Card} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getByMtgoId(id: number): Promise<Models.Card>;
  getByMtgoId(id: number, options: msRest.RequestOptionsBase): Promise<Models.Card>;
  getByMtgoId(id: number, callback: msRest.ServiceCallback<Models.Card>): void;
  getByMtgoId(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Card>): void;
  getByMtgoId(id: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Card>): any {
    return msRest.responseToBody(this.getByMtgoIdWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @param {number} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Card} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Card} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getByArenaId(id: number): Promise<Models.Card>;
  getByArenaId(id: number, options: msRest.RequestOptionsBase): Promise<Models.Card>;
  getByArenaId(id: number, callback: msRest.ServiceCallback<Models.Card>): void;
  getByArenaId(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Card>): void;
  getByArenaId(id: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Card>): any {
    return msRest.responseToBody(this.getByArenaIdWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @param {string} code
   *
   * @param {number} number
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Card} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Card} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getByCodeByNumber(code: string, number: number): Promise<Models.Card>;
  getByCodeByNumber(code: string, number: number, options: msRest.RequestOptionsBase): Promise<Models.Card>;
  getByCodeByNumber(code: string, number: number, callback: msRest.ServiceCallback<Models.Card>): void;
  getByCodeByNumber(code: string, number: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Card>): void;
  getByCodeByNumber(code: string, number: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Card>): any {
    return msRest.responseToBody(this.getByCodeByNumberWithHttpOperationResponse.bind(this), code, number, options, callback);
  }

  /**
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Card} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Card} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getById(id: string): Promise<Models.Card>;
  getById(id: string, options: msRest.RequestOptionsBase): Promise<Models.Card>;
  getById(id: string, callback: msRest.ServiceCallback<Models.Card>): void;
  getById(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Card>): void;
  getById(id: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Card>): any {
    return msRest.responseToBody(this.getByIdWithHttpOperationResponse.bind(this), id, options, callback);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getAllOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards",
  queryParameters: [
    Parameters.page
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CardList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const searchOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/search",
  queryParameters: [
    Parameters.q,
    Parameters.unique,
    Parameters.order,
    Parameters.dir,
    Parameters.includeExtras,
    Parameters.page
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CardList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getNamedOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/named",
  queryParameters: [
    Parameters.exact,
    Parameters.fuzzy,
    Parameters.set,
    Parameters.format,
    Parameters.face,
    Parameters.version,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Card
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const autocompleteOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/autocomplete",
  queryParameters: [
    Parameters.q
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Catalog
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getRandomOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/random",
  responses: {
    200: {
      bodyMapper: Mappers.Card
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByMultiverseIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/multiverse/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Card
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByMtgoIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/mtgo/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Card
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByArenaIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/arena/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Card
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByCodeByNumberOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/{code}/{number}",
  urlParameters: [
    Parameters.code,
    Parameters.number
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Card
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/{id}",
  urlParameters: [
    Parameters.id1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Card
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
