/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/symbologyMappers";
import * as Parameters from "../models/parameters";
import { ScryfallClientContext } from "../scryfallClientContext";

/** Class representing a Symbology. */
export class Symbology {
  private readonly client: ScryfallClientContext;

  /**
   * Create a Symbology.
   * @param {ScryfallClientContext} client Reference to the service client.
   */
  constructor(client: ScryfallClientContext) {
    this.client = client;
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getAllWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.CardSymbolList>> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllOperationSpec);
  }

  /**
   * @param {string} cost
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  parseManaWithHttpOperationResponse(cost: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.ManaCost>> {
    return this.client.sendOperationRequest(
      {
        cost,
        options
      },
      parseManaOperationSpec);
  }

  /**
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.CardSymbolList} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.CardSymbolList} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getAll(): Promise<Models.CardSymbolList>;
  getAll(options: msRest.RequestOptionsBase): Promise<Models.CardSymbolList>;
  getAll(callback: msRest.ServiceCallback<Models.CardSymbolList>): void;
  getAll(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CardSymbolList>): void;
  getAll(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.CardSymbolList>): any {
    return msRest.responseToBody(this.getAllWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @param {string} cost
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.ManaCost} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ManaCost} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  parseMana(cost: string): Promise<Models.ManaCost>;
  parseMana(cost: string, options: msRest.RequestOptionsBase): Promise<Models.ManaCost>;
  parseMana(cost: string, callback: msRest.ServiceCallback<Models.ManaCost>): void;
  parseMana(cost: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManaCost>): void;
  parseMana(cost: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ManaCost>): any {
    return msRest.responseToBody(this.parseManaWithHttpOperationResponse.bind(this), cost, options, callback);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getAllOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "symbology",
  responses: {
    200: {
      bodyMapper: Mappers.CardSymbolList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const parseManaOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "symbology/parse-mana",
  queryParameters: [
    Parameters.cost
  ],
  responses: {
    201: {
      bodyMapper: Mappers.ManaCost
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
