/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/cardsMappers";
import * as Parameters from "../models/parameters";
import { ScryfallClientContext } from "../scryfallClientContext";

/** Class representing a Cards. */
export class Cards {
  private readonly client: ScryfallClientContext;

  /**
   * Create a Cards.
   * @param {ScryfallClientContext} client Reference to the service client.
   */
  constructor(client: ScryfallClientContext) {
    this.client = client;
  }

  /**
   * @param q
   * @param [options] The optional parameters
   * @returns Promise<Models.CardsSearchResponse>
   */
  search(q: string, options?: Models.CardsSearchOptionalParams): Promise<Models.CardsSearchResponse>;
  /**
   * @param q
   * @param callback The callback
   */
  search(q: string, callback: msRest.ServiceCallback<Models.CardList>): void;
  /**
   * @param q
   * @param options The optional parameters
   * @param callback The callback
   */
  search(q: string, options: Models.CardsSearchOptionalParams, callback: msRest.ServiceCallback<Models.CardList>): void;
  search(q: string, options?: Models.CardsSearchOptionalParams | msRest.ServiceCallback<Models.CardList>, callback?: msRest.ServiceCallback<Models.CardList>): Promise<Models.CardsSearchResponse> {
    return this.client.sendOperationRequest(
      {
        q,
        options
      },
      searchOperationSpec,
      callback) as Promise<Models.CardsSearchResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.CardsGetNamedResponse>
   */
  getNamed(options?: Models.CardsGetNamedOptionalParams): Promise<Models.CardsGetNamedResponse>;
  /**
   * @param callback The callback
   */
  getNamed(callback: msRest.ServiceCallback<Models.Card>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getNamed(options: Models.CardsGetNamedOptionalParams, callback: msRest.ServiceCallback<Models.Card>): void;
  getNamed(options?: Models.CardsGetNamedOptionalParams | msRest.ServiceCallback<Models.Card>, callback?: msRest.ServiceCallback<Models.Card>): Promise<Models.CardsGetNamedResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getNamedOperationSpec,
      callback) as Promise<Models.CardsGetNamedResponse>;
  }

  /**
   * @param q
   * @param [options] The optional parameters
   * @returns Promise<Models.CardsAutocompleteResponse>
   */
  autocomplete(q: string, options?: msRest.RequestOptionsBase): Promise<Models.CardsAutocompleteResponse>;
  /**
   * @param q
   * @param callback The callback
   */
  autocomplete(q: string, callback: msRest.ServiceCallback<Models.Catalog>): void;
  /**
   * @param q
   * @param options The optional parameters
   * @param callback The callback
   */
  autocomplete(q: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Catalog>): void;
  autocomplete(q: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Catalog>, callback?: msRest.ServiceCallback<Models.Catalog>): Promise<Models.CardsAutocompleteResponse> {
    return this.client.sendOperationRequest(
      {
        q,
        options
      },
      autocompleteOperationSpec,
      callback) as Promise<Models.CardsAutocompleteResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.CardsGetRandomResponse>
   */
  getRandom(options?: msRest.RequestOptionsBase): Promise<Models.CardsGetRandomResponse>;
  /**
   * @param callback The callback
   */
  getRandom(callback: msRest.ServiceCallback<Models.Card>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getRandom(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Card>): void;
  getRandom(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Card>, callback?: msRest.ServiceCallback<Models.Card>): Promise<Models.CardsGetRandomResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getRandomOperationSpec,
      callback) as Promise<Models.CardsGetRandomResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.CardsGetByMultiverseIdResponse>
   */
  getByMultiverseId(id: number, options?: msRest.RequestOptionsBase): Promise<Models.CardsGetByMultiverseIdResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getByMultiverseId(id: number, callback: msRest.ServiceCallback<Models.Card>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getByMultiverseId(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Card>): void;
  getByMultiverseId(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Card>, callback?: msRest.ServiceCallback<Models.Card>): Promise<Models.CardsGetByMultiverseIdResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getByMultiverseIdOperationSpec,
      callback) as Promise<Models.CardsGetByMultiverseIdResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.CardsGetByMtgoIdResponse>
   */
  getByMtgoId(id: number, options?: msRest.RequestOptionsBase): Promise<Models.CardsGetByMtgoIdResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getByMtgoId(id: number, callback: msRest.ServiceCallback<Models.Card>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getByMtgoId(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Card>): void;
  getByMtgoId(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Card>, callback?: msRest.ServiceCallback<Models.Card>): Promise<Models.CardsGetByMtgoIdResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getByMtgoIdOperationSpec,
      callback) as Promise<Models.CardsGetByMtgoIdResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.CardsGetByArenaIdResponse>
   */
  getByArenaId(id: number, options?: msRest.RequestOptionsBase): Promise<Models.CardsGetByArenaIdResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getByArenaId(id: number, callback: msRest.ServiceCallback<Models.Card>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getByArenaId(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Card>): void;
  getByArenaId(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Card>, callback?: msRest.ServiceCallback<Models.Card>): Promise<Models.CardsGetByArenaIdResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getByArenaIdOperationSpec,
      callback) as Promise<Models.CardsGetByArenaIdResponse>;
  }

  /**
   * @param code
   * @param number
   * @param [options] The optional parameters
   * @returns Promise<Models.CardsGetByCodeByNumberResponse>
   */
  getByCodeByNumber(code: string, number: number, options?: msRest.RequestOptionsBase): Promise<Models.CardsGetByCodeByNumberResponse>;
  /**
   * @param code
   * @param number
   * @param callback The callback
   */
  getByCodeByNumber(code: string, number: number, callback: msRest.ServiceCallback<Models.Card>): void;
  /**
   * @param code
   * @param number
   * @param options The optional parameters
   * @param callback The callback
   */
  getByCodeByNumber(code: string, number: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Card>): void;
  getByCodeByNumber(code: string, number: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Card>, callback?: msRest.ServiceCallback<Models.Card>): Promise<Models.CardsGetByCodeByNumberResponse> {
    return this.client.sendOperationRequest(
      {
        code,
        number,
        options
      },
      getByCodeByNumberOperationSpec,
      callback) as Promise<Models.CardsGetByCodeByNumberResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.CardsGetByIdResponse>
   */
  getById(id: string, options?: msRest.RequestOptionsBase): Promise<Models.CardsGetByIdResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getById(id: string, callback: msRest.ServiceCallback<Models.Card>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getById(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Card>): void;
  getById(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Card>, callback?: msRest.ServiceCallback<Models.Card>): Promise<Models.CardsGetByIdResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getByIdOperationSpec,
      callback) as Promise<Models.CardsGetByIdResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const searchOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/search",
  queryParameters: [
    Parameters.q,
    Parameters.unique,
    Parameters.order,
    Parameters.dir,
    Parameters.includeExtras,
    Parameters.page
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CardList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getNamedOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/named",
  queryParameters: [
    Parameters.exact,
    Parameters.fuzzy,
    Parameters.set,
    Parameters.format,
    Parameters.face,
    Parameters.version,
    Parameters.pretty
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Card
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const autocompleteOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/autocomplete",
  queryParameters: [
    Parameters.q
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Catalog
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getRandomOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/random",
  responses: {
    200: {
      bodyMapper: Mappers.Card
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByMultiverseIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/multiverse/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Card
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByMtgoIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/mtgo/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Card
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByArenaIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/arena/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Card
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByCodeByNumberOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/{code}/{number}",
  urlParameters: [
    Parameters.code,
    Parameters.number
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Card
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/{id}",
  urlParameters: [
    Parameters.id1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Card
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
