/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/rulingsMappers";
import * as Parameters from "../models/parameters";
import { ScryfallClientContext } from "../scryfallClientContext";

/** Class representing a Rulings. */
export class Rulings {
  private readonly client: ScryfallClientContext;

  /**
   * Create a Rulings.
   * @param {ScryfallClientContext} client Reference to the service client.
   */
  constructor(client: ScryfallClientContext) {
    this.client = client;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.RulingsGetByMultiverseIdResponse>
   */
  getByMultiverseId(id: number, options?: msRest.RequestOptionsBase): Promise<Models.RulingsGetByMultiverseIdResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getByMultiverseId(id: number, callback: msRest.ServiceCallback<Models.RulingList>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getByMultiverseId(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RulingList>): void;
  getByMultiverseId(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RulingList>, callback?: msRest.ServiceCallback<Models.RulingList>): Promise<Models.RulingsGetByMultiverseIdResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getByMultiverseIdOperationSpec,
      callback) as Promise<Models.RulingsGetByMultiverseIdResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.RulingsGetByMtgoIdResponse>
   */
  getByMtgoId(id: number, options?: msRest.RequestOptionsBase): Promise<Models.RulingsGetByMtgoIdResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getByMtgoId(id: number, callback: msRest.ServiceCallback<Models.RulingList>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getByMtgoId(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RulingList>): void;
  getByMtgoId(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RulingList>, callback?: msRest.ServiceCallback<Models.RulingList>): Promise<Models.RulingsGetByMtgoIdResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getByMtgoIdOperationSpec,
      callback) as Promise<Models.RulingsGetByMtgoIdResponse>;
  }

  /**
   * @param code
   * @param number
   * @param [options] The optional parameters
   * @returns Promise<Models.RulingsGetByCodeByNumberIdResponse>
   */
  getByCodeByNumberId(code: string, number: number, options?: msRest.RequestOptionsBase): Promise<Models.RulingsGetByCodeByNumberIdResponse>;
  /**
   * @param code
   * @param number
   * @param callback The callback
   */
  getByCodeByNumberId(code: string, number: number, callback: msRest.ServiceCallback<Models.RulingList>): void;
  /**
   * @param code
   * @param number
   * @param options The optional parameters
   * @param callback The callback
   */
  getByCodeByNumberId(code: string, number: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RulingList>): void;
  getByCodeByNumberId(code: string, number: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RulingList>, callback?: msRest.ServiceCallback<Models.RulingList>): Promise<Models.RulingsGetByCodeByNumberIdResponse> {
    return this.client.sendOperationRequest(
      {
        code,
        number,
        options
      },
      getByCodeByNumberIdOperationSpec,
      callback) as Promise<Models.RulingsGetByCodeByNumberIdResponse>;
  }

  /**
   * @param id
   * @param [options] The optional parameters
   * @returns Promise<Models.RulingsGetByIdResponse>
   */
  getById(id: string, options?: msRest.RequestOptionsBase): Promise<Models.RulingsGetByIdResponse>;
  /**
   * @param id
   * @param callback The callback
   */
  getById(id: string, callback: msRest.ServiceCallback<Models.RulingList>): void;
  /**
   * @param id
   * @param options The optional parameters
   * @param callback The callback
   */
  getById(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RulingList>): void;
  getById(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RulingList>, callback?: msRest.ServiceCallback<Models.RulingList>): Promise<Models.RulingsGetByIdResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getByIdOperationSpec,
      callback) as Promise<Models.RulingsGetByIdResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getByMultiverseIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/multiverse/{id}/rulings",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RulingList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByMtgoIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/mtgo/{id}/rulings",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RulingList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByCodeByNumberIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/{code}/{number}/rulings",
  urlParameters: [
    Parameters.code,
    Parameters.number
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RulingList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "cards/{id}/rulings",
  urlParameters: [
    Parameters.id1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RulingList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
