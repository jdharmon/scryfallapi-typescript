/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/symbologyMappers";
import * as Parameters from "../models/parameters";
import { ScryfallClientContext } from "../scryfallClientContext";

/** Class representing a Symbology. */
export class Symbology {
  private readonly client: ScryfallClientContext;

  /**
   * Create a Symbology.
   * @param {ScryfallClientContext} client Reference to the service client.
   */
  constructor(client: ScryfallClientContext) {
    this.client = client;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.SymbologyGetAllResponse>
   */
  getAll(options?: msRest.RequestOptionsBase): Promise<Models.SymbologyGetAllResponse>;
  /**
   * @param callback The callback
   */
  getAll(callback: msRest.ServiceCallback<Models.CardSymbolList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAll(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CardSymbolList>): void;
  getAll(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CardSymbolList>, callback?: msRest.ServiceCallback<Models.CardSymbolList>): Promise<Models.SymbologyGetAllResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllOperationSpec,
      callback) as Promise<Models.SymbologyGetAllResponse>;
  }

  /**
   * @param cost
   * @param [options] The optional parameters
   * @returns Promise<Models.SymbologyParseManaResponse>
   */
  parseMana(cost: string, options?: msRest.RequestOptionsBase): Promise<Models.SymbologyParseManaResponse>;
  /**
   * @param cost
   * @param callback The callback
   */
  parseMana(cost: string, callback: msRest.ServiceCallback<Models.ManaCost>): void;
  /**
   * @param cost
   * @param options The optional parameters
   * @param callback The callback
   */
  parseMana(cost: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManaCost>): void;
  parseMana(cost: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManaCost>, callback?: msRest.ServiceCallback<Models.ManaCost>): Promise<Models.SymbologyParseManaResponse> {
    return this.client.sendOperationRequest(
      {
        cost,
        options
      },
      parseManaOperationSpec,
      callback) as Promise<Models.SymbologyParseManaResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getAllOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "symbology",
  responses: {
    200: {
      bodyMapper: Mappers.CardSymbolList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const parseManaOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "symbology/parse-mana",
  queryParameters: [
    Parameters.cost
  ],
  responses: {
    201: {
      bodyMapper: Mappers.ManaCost
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
